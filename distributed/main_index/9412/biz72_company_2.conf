#!/usr/bin/php
<?php 

//找到该索引配置变量名称
$file_name = basename(__FILE__,".conf"); 
$info = split("_" ,$file_name);
$config_name = "$info[0]_$info[1]";
$config = $$config_name;
$startID ="";
$endID = "";

$sphinx_db = new mysqli($config["sphinx_db_host"], 
                        $config["sphinx_db_user"], 
                        $config["sphinx_db_password"], 
                        $config["sphinx_db_name"], 
                        $config["sphinx_db_port"]);
$sphinx_db->query("SET NAMES utf8");

$sphinx_result = $sphinx_db->query("SELECT count(1) as total FROM {$config["table"]}");
$total = $sphinx_result->fetch_array();
$limit = count_limit($total["total"],$config["limit"],$config["limit_add"],$globals);
$limit_start = $limit * ($info[2]-1);

$sphinx_result = $sphinx_db->query("SELECT {$config["field"]} FROM {$config["table"]} order by {$config["field"]} asc limit $limit_start,$limit");
$start = $sphinx_result->fetch_array();
$startID =  $start["id"];

$sphinx_result = $sphinx_db->query("SELECT {$config["field"]} FROM {$config["table"]} order by {$config["field"]} asc limit $limit_start,$limit");
while ($end = $sphinx_result->fetch_array()){
    $endID = $end["id"];
}

if(empty($startID)){
    $startID = 0;
}

if(empty($endID)){
    $endID = 0;
}

?>

source <?php echo $file_name."\n" ?>
{
    # data source type. mandatory, no default value
    # known types are mysql, pgsql, mssql, xmlpipe, xmlpipe2, odbc
    type = mysql
    
    # some straightforward parameters for SQL source types
    sql_host = <?php echo $config["sphinx_db_host"]."\n";?>
    sql_user = <?php echo $config["sphinx_db_user"]."\n";?>
    sql_pass = <?php echo $config["sphinx_db_password"]."\n";?>
    sql_db   = <?php echo $config["sphinx_db_name"]."\n";?>
    sql_port = <?php echo $config["sphinx_db_port"]."\n";?>
    

    # pre-query, executed before the main fetch query
    # multi-value, optional, default is empty list of queries
    #
    sql_query_pre  = SET NAMES utf8
    sql_query_pre  = SET SESSION query_cache_type=OFF
    sql_query_pre  = LOCK TABLES <?php echo $config["table"];?> write
    sql_query_post = UNLOCK TABLES
    
    <?php echo $config["search_config_sql"]."\n"; ?>        

    sql_query_range = SELECT MIN(id),MAX(id) FROM <?php echo $config['table'];?> WHERE id >=<?php echo $startID; ?> and id<=<?php echo $endID; ?>
    
    <?php echo $config["search_config_att"]; ?>

    sql_joined_field = \
	class_tags from query; \
	SELECT id, class_tags FROM com_info_data WHERE id >=<?php echo $startID; ?> and id<=<?php echo $endID; ?> ORDER BY id ASC; \
        

    sql_joined_field = \
	com_mainpro from query; \
	SELECT id, com_mainpro FROM com_info_data WHERE id >=<?php echo $startID; ?> and id<=<?php echo $endID; ?> ORDER BY id ASC;

    sql_joined_field = \
	com_gsjj from query; \
	SELECT id, com_gsjj FROM com_info_data WHERE id >=<?php echo $startID; ?> and id<=<?php echo $endID; ?> ORDER BY id ASC;

    sql_joined_field = \
	iscom_gsjj from query; \
	SELECT id, (`com_gsjj` IS NOT NULL AND CHAR_LENGTH(`com_gsjj`) >50) AS iscom_gsjj FROM com_info_data WHERE id >=<?php echo $startID; ?> and id<=<?php echo $endID; ?> ORDER BY id ASC;
    
    sql_attr_multi = uint com from ranged-query; \
	            SELECT ci.id as id,ctr.tag_id as tag_id FROM com_info as ci, com_tag_relate as ctr WHERE ci.id = ctr.com_id AND ci.id >=$start AND ci.id <=$end; \
	            SELECT MIN(ci.id), MAX(ci.id) FROM com_info as ci, com_tag_relate as ctr WHERE ci.id = ctr.com_id AND ci.id >=<?php echo $startID; ?> and ci.id<=<?php echo $endID; ?>

    sql_attr_multi = uint r_com from ranged-query; \
                     SELECT ci.id as id,LEFT(ctr.tag_id,3)*1 as tag_id FROM com_info as ci, com_tag_relate as ctr WHERE ci.id = ctr.com_id AND ci.id >=$start AND ci.id <=$end; \
                     SELECT MIN(ci.id), MAX(ci.id) FROM com_info as ci, com_tag_relate as ctr WHERE ci.id = ctr.com_id AND ci.id >=<?php echo $startID; ?> and ci.id<=<?php echo $endID; ?>                
    
    sql_attr_multi = uint c_com from ranged-query; \
                     SELECT ci.id as id,LEFT(ctr.tag_id,6)*1 as tag_id FROM com_info as ci, com_tag_relate as ctr WHERE ci.id = ctr.com_id AND ci.id >=$start AND ci.id <=$end; \
                     SELECT MIN(ci.id), MAX(ci.id) FROM com_info as ci, com_tag_relate as ctr WHERE ci.id = ctr.com_id AND ci.id >=<?php echo $startID; ?> and ci.id<=<?php echo $endID; ?>

   sql_attr_multi  = uint block from ranged-query; \
                     SELECT ci.id as id,ctr.block  as block  FROM com_info as ci, com_tag_relate as ctr WHERE ci.id = ctr.com_id AND ci.id >=$start AND ci.id <=$end; \
                     SELECT MIN(ci.id), MAX(ci.id) FROM com_info as ci, com_tag_relate as ctr WHERE ci.id = ctr.com_id AND ci.id >=<?php echo $startID; ?> and ci.id<=<?php echo $endID; ?>

   sql_attr_multi  = uint com_type from ranged-query; \
                     SELECT ci.id as id,ctr.type_id as type_id  FROM com_info as ci, com_type_relate as ctr WHERE ci.id = ctr.com_id AND ci.id >=$start AND ci.id <=$end; \
                     SELECT MIN(ci.id), MAX(ci.id) FROM com_info as ci, com_type_relate as ctr WHERE ci.id = ctr.com_id AND ci.id >=<?php echo $startID; ?> and ci.id<=<?php echo $endID; ?>
    
}

index <?php echo $file_name."\n"; ?>
{
    # index type
    # optional, default is 'plain'
    # known values are 'plain', 'distributed', and 'rt' (see samples below)
    # type			= plain

    # document source(s) to index
    # multi-value, mandatory
    # document IDs must be globally unique across all sources
    source = <?php echo $file_name ?>


    # index files path and file name, without extension
    # mandatory, path must be writable, extensions will be auto-appended
    path = <?php echo $globals["index_path"];?>/<?php echo $file_name ?>/

    # charset encoding type
    # optional, default is 'sbcs'
    # known types are 'sbcs' (Single Byte CharSet) and 'utf-8'
    charset_type = utf-8

    # whether to strip HTML tags from incoming documents
    # known values are 0 (do not strip) and 1 (do strip)
    # optional, default is 0
    html_strip = 1

    #sphinx-for-chines 特有的选项
    #指定分词库
    chinese_dictionary = /usr/local/sphinx-for-chinese/var/xdict
}